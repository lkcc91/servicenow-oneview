/*
# (C) Copyright (2012-2017) Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
*/
'use strict';

var spawn = require('child_process').spawn;
var co = require('co');

var RHEL73_OSDP_Settings = {
  "osDeploymentPlanUri": "/rest/os-deployment-plans/a23a3fa2-4c07-4eed-b2e6-56bbbc659834",
  "osCustomAttributes": [{
    "name": "DCOS_Agent_Role",
    "value": "slave"
  },
  {
    "name": "DCOS_Bootstrap_URL",
    "value": "http://10.16.231.155/dcos_install.sh"
  },
  {
    "name": "NewRootPassword",
    "value": "gseteam"
  },
  {
    "name": "PUBLIC_NIC.connectionid",
    "value": "1"
  },
  {
    "name": "PUBLIC_NIC.dhcp",
    "value": "false"
  },
  {
    "name": "PUBLIC_NIC.ipv4disable",
    "value": "false"
  },
  {
    "name": "PUBLIC_NIC.networkuri",
    "value": "/rest/ethernet-networks/5fcd99e4-581b-4b39-bac9-30311a344df6"
  },
  {
    "name": "PUBLIC_NIC.constraint",
    "value": "auto"
  },
  {
    "name": "ServerFQDN",
    "value": "dcos-agentx"
  }],
  "osVolumeUri": null
};

var ESX65_OSDP_Settings = {
  "osDeploymentPlanUri": "/rest/os-deployment-plans/a23a3fa2-4c07-4eed-b2e6-56bbbc659834",
  "osCustomAttributes": [{
    "name": "DCOS_Agent_Role",
    "value": "slave"
  },
  {
    "name": "DCOS_Bootstrap_URL",
    "value": "http://10.16.231.155/dcos_install.sh"
  },
  {
    "name": "NewRootPassword",
    "value": "gseteam"
  },
  {
    "name": "PUBLIC_NIC.connectionid",
    "value": "1"
  },
  {
    "name": "PUBLIC_NIC.dhcp",
    "value": "false"
  },
  {
    "name": "PUBLIC_NIC.ipv4disable",
    "value": "false"
  },
  {
    "name": "PUBLIC_NIC.networkuri",
    "value": "/rest/ethernet-networks/5fcd99e4-581b-4b39-bac9-30311a344df6"
  },
  {
    "name": "PUBLIC_NIC.constraint",
    "value": "auto"
  },
  {
    "name": "ServerFQDN",
    "value": "dcos-agentx"
  }],
  "osVolumeUri": null
};

var server_profile_data_with_i3s = {
  "type": "ServerProfileV6",
  "serverHardwareUri": "",
  "serverHardwareTypeUri": "",
  "enclosureGroupUri": "",
  "serialNumberType": "Virtual",
  "iscsiInitiatorNameType": "AutoGenerated",
  "macType": "Virtual",
  "wwnType": "Virtual",
  "name": "rhel7.3-test-prakash",
  "description": "",
  "affinity": "Bay",
  "connections": [{
    "id": 1,
    "name": "V028",
    "functionType": "Ethernet",
    "portId": "Auto",
    "requestedMbps": "2500",
    "networkUri": "/rest/ethernet-networks/5fcd99e4-581b-4b39-bac9-30311a344df6",
    "boot": {
      
    },
    "macType": "Virtual",
    "wwpnType": "Virtual",
    "wwpn": null,
    "wwnn": null,
    "requestedVFs": "Auto"
  },
  {
      "id": 2,
      "name": "Deployment Network A",
      "functionType": "Ethernet",
      "portId": "Mezz 3:1-a",
      "requestedMbps": "2500",
      "networkUri": "/rest/ethernet-networks/fb96cd8c-4f51-44af-8ec6-55dc3d648da9",
      "boot": {
        "priority": "Primary",
        "initiatorNameSource": "ProfileInitiatorName",
        "firstBootTargetIp": null,
        "secondBootTargetIp": "",
        "secondBootTargetPort": "",
        "initiatorName": null,
        "initiatorIp": null,
        "bootTargetName": null,
        "bootTargetLun": null
      },
      "mac": null,
      "wwpn": "",
      "wwnn": "",
      "requestedVFs": "Auto"
    }
  ],
  "boot": {
    "manageBoot": true,
    "order": ["HardDisk"]
  },
  "bootMode": {
    "manageMode": true,
    "mode": "UEFIOptimized",
    "pxeBootPolicy": "Auto"
  },
  "firmware": {
    "manageFirmware": false,
    "firmwareBaselineUri": "",
    "forceInstallFirmware": false,
    "firmwareInstallType": null
  },
  "bios": {
    "manageBios": false,
    "overriddenSettings": []
  },
  "hideUnusedFlexNics": true,
  "iscsiInitiatorName": "",
  "osDeploymentSettings": "",
  "localStorage": {
    "sasLogicalJBODs": [],
    "controllers": []
  },
  "sanStorage": null
};

var server_profile_data = {
  "type": "ServerProfileV6",
  "serverHardwareUri": "",
  "serverHardwareTypeUri": "",
  "enclosureGroupUri": "",
  "serialNumberType": "Virtual",
  "iscsiInitiatorNameType": "AutoGenerated",
  "macType": "Virtual",
  "wwnType": "Virtual",
  "name": "RHEL7.2_Gen9_From_Arrow_App",
  "description": "",
  "affinity": "Bay",
  "connections": [{
            "id": 1,
            "name":"V028",
            "functionType": "Ethernet",
            "portId": "Auto",
            "requestedMbps": 2500,
            "networkUri": "/rest/ethernet-networks/5fcd99e4-581b-4b39-bac9-30311a344df6",
            "mac": null,
            "wwpn": null,
            "wwnn": null
        }

  ],
  "boot": {
    "manageBoot": false
  },
  "bootMode": null,
  "firmware": {
    "manageFirmware": false,
    "firmwareBaselineUri": "",
    "forceInstallFirmware": false,
    "firmwareInstallType": null
  },
  "bios": {
    "manageBios": false,
    "overriddenSettings": []
  },
  "hideUnusedFlexNics": true,
  "iscsiInitiatorName": "",
  "osDeploymentSettings": null,
  "localStorage": {
    "sasLogicalJBODs": [],
    "controllers": []
  },
  "sanStorage": null
};

var utils = {
  /**
   * Convert a function accept a callback at the end of arguments to a function
   * return a Promise.
   * @param  {Function} fn       function would be translated.
   * @param  {Function} callback optional, accept the same arguments as fn's callback.
   * throw an error object to reject promise;
   * return a value to fulfill promise. If callback is omit, it is assumpt to be callback(err, data).
   * @param  {Object}   context  this
   * @return {Promise}            Promise
   */
  c2p : function(fn, callback, context) {

    if (typeof callback !== 'function') {
      context = callback;
      callback = (err, data) => {
        if (err) {
          throw err;
        }
        return data;
      };
    }

    return function() {
      let args = Array.prototype.slice.call(arguments);
      let that = this;
      return new Promise((fulfill, reject) => {

        fn.apply(context, args.concat([function() {
          try {
            let result = callback.apply(context || that, arguments);
            fulfill(result);
          } catch (e) {
            reject(e);
          }
        }]));
      });
    };
  },

  /**
   * check environment
   *
   * @return {Boolean} true is in development environment.
   */
  isDevEnv : function() {
    return process.env.NODE_ENV !== 'production';
  },
  /**
   * ping
   * @param  {string}   ip       ip or host name
   * @param  {Function} callback callback with output of ping
   */
  ping: function(ip, callback) {
    let ping = spawn('ping', ['-c', 3, ip]);
    ping.stdout.on('data', function(data) {
      callback(undefined, data.toString());
    });
    ping.stderr.on('data', function(data) {
      callback(undefined, data.toString());
    });
    ping.on('exit', function(code) {
      // TODO: call with undefined to notify UI stop request. because our implementation not support stop from server side now.
      callback();
    });
  },

  /**
   * retrieve appliance id from uri
   * example:
   *   uri: /rest/global/appliances/16_125_106_50
   *   id: 16.125.106.50
   * TODO: we need change appliance id to its uuid, not based on ip address
   * @param {string} uri
   * @returns {string} id
   */
  getApplianceIdFromUri: function( uri ) {
    let id = uri.split('/').pop();
    return id && id.replace(/_/g, '.');
  },

  /**
   * Wait for OneView task complete.
   * Usage:
   * 
   *  opt = rest.makeOption( appliance.applianceLocation, taskUri, null, token );
   *  yield c2p(utils.waitForTaskComplete, (err) => {
   *     if (err) {
   *      log.error( "failed to get task resource when generating RabbitMq certificates." + err );
   *    }
   *  })(rest, opt, 15);
   *
   * @param {restClient} restClient object for get API
   * @param {option} specify the REST API call option
   * @param {string} timeout Default value is 2 minutes(Time unit is second) if it is not specified
   */
  waitForTaskComplete: function(rest, option, timeout, callback) {
    var _timeout = (timeout ? timeout : 120) * 1000;

    let log = require('./log');
    var getTask = function() {
      co( function *() {
        let taskResource = yield utils.c2p( rest.performGetRequest )(option);
        if (taskResource && taskResource.percentComplete === 100) {
          log.info( "Task: " + option.uri + " is complete and stop waiting. ");
          clearInterval(timer);
          callback(null);
        } else {
          if (_timeout > 0) {
            _timeout -= 3000;
            log.info( _timeout + " milliseconds to wait for task: " + option.uri);
          } else {
            log.warn( "Timeout: " + timeout + " seconds when waiting for OV task");
            clearInterval(timer);
            callback(null);
          }
        }
      }).catch( ( err ) => {
        log.error( "failed to get task resource " + err );
        clearInterval(timer);
        callback(err);
      });
    };
    var timer = setInterval(getTask, 3000);
  },

  //function to return POST request body for server profile
  formRequestBody: function(serverRecord, type, osName) {
    var serverHardwareUri = serverRecord.uri;
    var serverHardwareTypeUri = serverRecord.serverHardwareTypeUri;
    var serverGroupUri = serverRecord.serverGroupUri;

    if ( type == null ) {
      server_profile_data.serverHardwareUri = serverHardwareUri;
      server_profile_data.serverHardwareTypeUri = serverHardwareTypeUri;
      server_profile_data.enclosureGroupUri = serverGroupUri;
      return server_profile_data;
    } else { //use image streamer json body
      if (osName == "RHEL_73") {
        server_profile_data_with_i3s.osDeploymentSettings = RHEL73_OSDP_Settings
      } else if (osName == "ESX_65") {
        server_profile_data_with_i3s.osDeploymentSettings = ESX65_OSDP_Settings
      }
      server_profile_data_with_i3s.serverHardwareUri = serverHardwareUri;
      server_profile_data_with_i3s.serverHardwareTypeUri = serverHardwareTypeUri;
      server_profile_data_with_i3s.enclosureGroupUri = serverGroupUri;
      return server_profile_data_with_i3s;
    }    
  }
};

module.exports = utils;
